/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TOKEN_INFO_DISCRIMINATOR = new Uint8Array([
  109, 162, 52, 125, 77, 166, 37, 202,
]);

export function getTokenInfoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TOKEN_INFO_DISCRIMINATOR);
}

export type TokenInfo = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  mint: Address;
  totalSupply: bigint;
  createdAt: bigint;
};

export type TokenInfoArgs = {
  authority: Address;
  mint: Address;
  totalSupply: number | bigint;
  createdAt: number | bigint;
};

export function getTokenInfoEncoder(): FixedSizeEncoder<TokenInfoArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['totalSupply', getU64Encoder()],
      ['createdAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_INFO_DISCRIMINATOR })
  );
}

export function getTokenInfoDecoder(): FixedSizeDecoder<TokenInfo> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['totalSupply', getU64Decoder()],
    ['createdAt', getI64Decoder()],
  ]);
}

export function getTokenInfoCodec(): FixedSizeCodec<TokenInfoArgs, TokenInfo> {
  return combineCodec(getTokenInfoEncoder(), getTokenInfoDecoder());
}

export function decodeTokenInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenInfo, TAddress>;
export function decodeTokenInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenInfo, TAddress>;
export function decodeTokenInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenInfo, TAddress> | MaybeAccount<TokenInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenInfoDecoder()
  );
}

export async function fetchTokenInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenInfo, TAddress>> {
  const maybeAccount = await fetchMaybeTokenInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenInfo(maybeAccount);
}

export async function fetchAllTokenInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenInfo>[]> {
  const maybeAccounts = await fetchAllMaybeTokenInfo(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenInfo(maybeAccount));
}

export function getTokenInfoSize(): number {
  return 88;
}
