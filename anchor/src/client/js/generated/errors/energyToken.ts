/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { ENERGY_TOKEN_PROGRAM_ADDRESS } from '../programs';

/** UnauthorizedAuthority: Unauthorized authority */
export const ENERGY_TOKEN_ERROR__UNAUTHORIZED_AUTHORITY = 0x1770; // 6000
/** InvalidMeter: Invalid meter */
export const ENERGY_TOKEN_ERROR__INVALID_METER = 0x1771; // 6001
/** InsufficientBalance: Insufficient token balance */
export const ENERGY_TOKEN_ERROR__INSUFFICIENT_BALANCE = 0x1772; // 6002

export type EnergyTokenError =
  | typeof ENERGY_TOKEN_ERROR__INSUFFICIENT_BALANCE
  | typeof ENERGY_TOKEN_ERROR__INVALID_METER
  | typeof ENERGY_TOKEN_ERROR__UNAUTHORIZED_AUTHORITY;

let energyTokenErrorMessages: Record<EnergyTokenError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  energyTokenErrorMessages = {
    [ENERGY_TOKEN_ERROR__INSUFFICIENT_BALANCE]: `Insufficient token balance`,
    [ENERGY_TOKEN_ERROR__INVALID_METER]: `Invalid meter`,
    [ENERGY_TOKEN_ERROR__UNAUTHORIZED_AUTHORITY]: `Unauthorized authority`,
  };
}

export function getEnergyTokenErrorMessage(code: EnergyTokenError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (energyTokenErrorMessages as Record<EnergyTokenError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isEnergyTokenError<TProgramErrorCode extends EnergyTokenError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ENERGY_TOKEN_PROGRAM_ADDRESS,
    code
  );
}
