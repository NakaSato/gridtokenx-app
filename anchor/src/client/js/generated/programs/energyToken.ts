/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddRecValidatorInstruction,
  type ParsedBurnTokensInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitializeTokenInstruction,
  type ParsedTransferTokensInstruction,
} from '../instructions';

export const ENERGY_TOKEN_PROGRAM_ADDRESS =
  '2CVWTnckn5TXUWXdZoZE6LydiQJGMYHVVPipkoy1LVqr' as Address<'2CVWTnckn5TXUWXdZoZE6LydiQJGMYHVVPipkoy1LVqr'>;

export enum EnergyTokenAccount {
  TokenInfo,
}

export function identifyEnergyTokenAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EnergyTokenAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 162, 52, 125, 77, 166, 37, 202])
      ),
      0
    )
  ) {
    return EnergyTokenAccount.TokenInfo;
  }
  throw new Error(
    'The provided account could not be identified as a energyToken account.'
  );
}

export enum EnergyTokenInstruction {
  AddRecValidator,
  BurnTokens,
  Initialize,
  InitializeToken,
  TransferTokens,
}

export function identifyEnergyTokenInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EnergyTokenInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 235, 183, 190, 157, 85, 246, 2])
      ),
      0
    )
  ) {
    return EnergyTokenInstruction.AddRecValidator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([76, 15, 51, 254, 229, 215, 121, 66])
      ),
      0
    )
  ) {
    return EnergyTokenInstruction.BurnTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return EnergyTokenInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 209, 150, 50, 190, 117, 16, 54])
      ),
      0
    )
  ) {
    return EnergyTokenInstruction.InitializeToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 180, 238, 175, 74, 85, 126, 188])
      ),
      0
    )
  ) {
    return EnergyTokenInstruction.TransferTokens;
  }
  throw new Error(
    'The provided instruction could not be identified as a energyToken instruction.'
  );
}

export type ParsedEnergyTokenInstruction<
  TProgram extends string = '2CVWTnckn5TXUWXdZoZE6LydiQJGMYHVVPipkoy1LVqr',
> =
  | ({
      instructionType: EnergyTokenInstruction.AddRecValidator;
    } & ParsedAddRecValidatorInstruction<TProgram>)
  | ({
      instructionType: EnergyTokenInstruction.BurnTokens;
    } & ParsedBurnTokensInstruction<TProgram>)
  | ({
      instructionType: EnergyTokenInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: EnergyTokenInstruction.InitializeToken;
    } & ParsedInitializeTokenInstruction<TProgram>)
  | ({
      instructionType: EnergyTokenInstruction.TransferTokens;
    } & ParsedTransferTokensInstruction<TProgram>);
