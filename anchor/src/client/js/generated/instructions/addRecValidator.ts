/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ENERGY_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_REC_VALIDATOR_DISCRIMINATOR = new Uint8Array([
  73, 235, 183, 190, 157, 85, 246, 2,
]);

export function getAddRecValidatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_REC_VALIDATOR_DISCRIMINATOR
  );
}

export type AddRecValidatorInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountTokenInfo extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenInfo extends string
        ? WritableAccount<TAccountTokenInfo>
        : TAccountTokenInfo,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type AddRecValidatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorPubkey: Address;
  authorityName: string;
};

export type AddRecValidatorInstructionDataArgs = {
  validatorPubkey: Address;
  authorityName: string;
};

export function getAddRecValidatorInstructionDataEncoder(): Encoder<AddRecValidatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorPubkey', getAddressEncoder()],
      [
        'authorityName',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: ADD_REC_VALIDATOR_DISCRIMINATOR })
  );
}

export function getAddRecValidatorInstructionDataDecoder(): Decoder<AddRecValidatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorPubkey', getAddressDecoder()],
    ['authorityName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getAddRecValidatorInstructionDataCodec(): Codec<
  AddRecValidatorInstructionDataArgs,
  AddRecValidatorInstructionData
> {
  return combineCodec(
    getAddRecValidatorInstructionDataEncoder(),
    getAddRecValidatorInstructionDataDecoder()
  );
}

export type AddRecValidatorInput<
  TAccountTokenInfo extends string = string,
  TAccountAuthority extends string = string,
> = {
  tokenInfo: Address<TAccountTokenInfo>;
  authority: TransactionSigner<TAccountAuthority>;
  validatorPubkey: AddRecValidatorInstructionDataArgs['validatorPubkey'];
  authorityName: AddRecValidatorInstructionDataArgs['authorityName'];
};

export function getAddRecValidatorInstruction<
  TAccountTokenInfo extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
>(
  input: AddRecValidatorInput<TAccountTokenInfo, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): AddRecValidatorInstruction<
  TProgramAddress,
  TAccountTokenInfo,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? ENERGY_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenInfo: { value: input.tokenInfo ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.tokenInfo),
      getAccountMeta(accounts.authority),
    ],
    data: getAddRecValidatorInstructionDataEncoder().encode(
      args as AddRecValidatorInstructionDataArgs
    ),
    programAddress,
  } as AddRecValidatorInstruction<
    TProgramAddress,
    TAccountTokenInfo,
    TAccountAuthority
  >);
}

export type ParsedAddRecValidatorInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tokenInfo: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: AddRecValidatorInstructionData;
};

export function parseAddRecValidatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddRecValidatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { tokenInfo: getNextAccount(), authority: getNextAccount() },
    data: getAddRecValidatorInstructionDataDecoder().decode(instruction.data),
  };
}
