/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ENERGY_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BURN_TOKENS_DISCRIMINATOR = new Uint8Array([
  76, 15, 51, 254, 229, 215, 121, 66,
]);

export function getBurnTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BURN_TOKENS_DISCRIMINATOR);
}

export type BurnTokensInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountTokenInfo extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenAccount extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenInfo extends string
        ? WritableAccount<TAccountTokenInfo>
        : TAccountTokenInfo,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BurnTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type BurnTokensInstructionDataArgs = { amount: number | bigint };

export function getBurnTokensInstructionDataEncoder(): FixedSizeEncoder<BurnTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BURN_TOKENS_DISCRIMINATOR })
  );
}

export function getBurnTokensInstructionDataDecoder(): FixedSizeDecoder<BurnTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getBurnTokensInstructionDataCodec(): FixedSizeCodec<
  BurnTokensInstructionDataArgs,
  BurnTokensInstructionData
> {
  return combineCodec(
    getBurnTokensInstructionDataEncoder(),
    getBurnTokensInstructionDataDecoder()
  );
}

export type BurnTokensInput<
  TAccountTokenInfo extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  tokenInfo: Address<TAccountTokenInfo>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: BurnTokensInstructionDataArgs['amount'];
};

export function getBurnTokensInstruction<
  TAccountTokenInfo extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
>(
  input: BurnTokensInput<
    TAccountTokenInfo,
    TAccountMint,
    TAccountTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BurnTokensInstruction<
  TProgramAddress,
  TAccountTokenInfo,
  TAccountMint,
  TAccountTokenAccount,
  TAccountAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ENERGY_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenInfo: { value: input.tokenInfo ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.tokenInfo),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getBurnTokensInstructionDataEncoder().encode(
      args as BurnTokensInstructionDataArgs
    ),
    programAddress,
  } as BurnTokensInstruction<
    TProgramAddress,
    TAccountTokenInfo,
    TAccountMint,
    TAccountTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >);
}

export type ParsedBurnTokensInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tokenInfo: TAccountMetas[0];
    mint: TAccountMetas[1];
    tokenAccount: TAccountMetas[2];
    authority: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: BurnTokensInstructionData;
};

export function parseBurnTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBurnTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenInfo: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getBurnTokensInstructionDataDecoder().decode(instruction.data),
  };
}
