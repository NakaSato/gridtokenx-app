/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ENERGY_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_TOKEN_DISCRIMINATOR = new Uint8Array([
  38, 209, 150, 50, 190, 117, 16, 54,
]);

export function getInitializeTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_TOKEN_DISCRIMINATOR
  );
}

export type InitializeTokenInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountTokenInfo extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenInfo extends string
        ? WritableAccount<TAccountTokenInfo>
        : TAccountTokenInfo,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeTokenInstructionDataArgs = {};

export function getInitializeTokenInstructionDataEncoder(): FixedSizeEncoder<InitializeTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_TOKEN_DISCRIMINATOR })
  );
}

export function getInitializeTokenInstructionDataDecoder(): FixedSizeDecoder<InitializeTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeTokenInstructionDataCodec(): FixedSizeCodec<
  InitializeTokenInstructionDataArgs,
  InitializeTokenInstructionData
> {
  return combineCodec(
    getInitializeTokenInstructionDataEncoder(),
    getInitializeTokenInstructionDataDecoder()
  );
}

export type InitializeTokenAsyncInput<
  TAccountTokenInfo extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tokenInfo?: Address<TAccountTokenInfo>;
  mint: Address<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeTokenInstructionAsync<
  TAccountTokenInfo extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
>(
  input: InitializeTokenAsyncInput<
    TAccountTokenInfo,
    TAccountMint,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeTokenInstruction<
    TProgramAddress,
    TAccountTokenInfo,
    TAccountMint,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ENERGY_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenInfo: { value: input.tokenInfo ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenInfo.value) {
    accounts.tokenInfo.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 105, 110, 102, 111])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.tokenInfo),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeTokenInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeTokenInstruction<
    TProgramAddress,
    TAccountTokenInfo,
    TAccountMint,
    TAccountAuthority,
    TAccountSystemProgram
  >);
}

export type InitializeTokenInput<
  TAccountTokenInfo extends string = string,
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tokenInfo: Address<TAccountTokenInfo>;
  mint: Address<TAccountMint>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeTokenInstruction<
  TAccountTokenInfo extends string,
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
>(
  input: InitializeTokenInput<
    TAccountTokenInfo,
    TAccountMint,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeTokenInstruction<
  TProgramAddress,
  TAccountTokenInfo,
  TAccountMint,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ENERGY_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenInfo: { value: input.tokenInfo ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.tokenInfo),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeTokenInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeTokenInstruction<
    TProgramAddress,
    TAccountTokenInfo,
    TAccountMint,
    TAccountAuthority,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeTokenInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tokenInfo: TAccountMetas[0];
    mint: TAccountMetas[1];
    authority: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeTokenInstructionData;
};

export function parseInitializeTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenInfo: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeTokenInstructionDataDecoder().decode(instruction.data),
  };
}
