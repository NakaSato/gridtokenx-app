/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ENERGY_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TRANSFER_TOKENS_DISCRIMINATOR = new Uint8Array([
  54, 180, 238, 175, 74, 85, 126, 188,
]);

export function getTransferTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSFER_TOKENS_DISCRIMINATOR
  );
}

export type TransferTokensInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountFromTokenAccount extends string | AccountMeta<string> = string,
  TAccountToTokenAccount extends string | AccountMeta<string> = string,
  TAccountFromAuthority extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFromTokenAccount extends string
        ? WritableAccount<TAccountFromTokenAccount>
        : TAccountFromTokenAccount,
      TAccountToTokenAccount extends string
        ? WritableAccount<TAccountToTokenAccount>
        : TAccountToTokenAccount,
      TAccountFromAuthority extends string
        ? ReadonlySignerAccount<TAccountFromAuthority> &
            AccountSignerMeta<TAccountFromAuthority>
        : TAccountFromAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type TransferTokensInstructionDataArgs = { amount: number | bigint };

export function getTransferTokensInstructionDataEncoder(): FixedSizeEncoder<TransferTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_TOKENS_DISCRIMINATOR })
  );
}

export function getTransferTokensInstructionDataDecoder(): FixedSizeDecoder<TransferTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getTransferTokensInstructionDataCodec(): FixedSizeCodec<
  TransferTokensInstructionDataArgs,
  TransferTokensInstructionData
> {
  return combineCodec(
    getTransferTokensInstructionDataEncoder(),
    getTransferTokensInstructionDataDecoder()
  );
}

export type TransferTokensInput<
  TAccountFromTokenAccount extends string = string,
  TAccountToTokenAccount extends string = string,
  TAccountFromAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  fromTokenAccount: Address<TAccountFromTokenAccount>;
  toTokenAccount: Address<TAccountToTokenAccount>;
  fromAuthority: TransactionSigner<TAccountFromAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: TransferTokensInstructionDataArgs['amount'];
};

export function getTransferTokensInstruction<
  TAccountFromTokenAccount extends string,
  TAccountToTokenAccount extends string,
  TAccountFromAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
>(
  input: TransferTokensInput<
    TAccountFromTokenAccount,
    TAccountToTokenAccount,
    TAccountFromAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TransferTokensInstruction<
  TProgramAddress,
  TAccountFromTokenAccount,
  TAccountToTokenAccount,
  TAccountFromAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ENERGY_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    fromTokenAccount: {
      value: input.fromTokenAccount ?? null,
      isWritable: true,
    },
    toTokenAccount: { value: input.toTokenAccount ?? null, isWritable: true },
    fromAuthority: { value: input.fromAuthority ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.fromTokenAccount),
      getAccountMeta(accounts.toTokenAccount),
      getAccountMeta(accounts.fromAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getTransferTokensInstructionDataEncoder().encode(
      args as TransferTokensInstructionDataArgs
    ),
    programAddress,
  } as TransferTokensInstruction<
    TProgramAddress,
    TAccountFromTokenAccount,
    TAccountToTokenAccount,
    TAccountFromAuthority,
    TAccountTokenProgram
  >);
}

export type ParsedTransferTokensInstruction<
  TProgram extends string = typeof ENERGY_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    fromTokenAccount: TAccountMetas[0];
    toTokenAccount: TAccountMetas[1];
    fromAuthority: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
  };
  data: TransferTokensInstructionData;
};

export function parseTransferTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransferTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      fromTokenAccount: getNextAccount(),
      toTokenAccount: getNextAccount(),
      fromAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getTransferTokensInstructionDataDecoder().decode(instruction.data),
  };
}
